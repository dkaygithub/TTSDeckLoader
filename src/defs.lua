---
--- Generated by EmmyLua(https://github.com/EmmyLua)
--- Created by Whimsical.
--- DateTime: 2021-08-19 6:39 a.m.
---

---@class ArkhamImportConfiguration
---@field public api_uri string
---@field public priority number
---@field public public_deck string
---@field public private_deck string
---@field public cards string
---@field public taboo string
---@field public discriminators table<string, string>
---@field public default_zone_overrides table<string, string>
---@field public bonded_cards table<string, ArkhamImportBondedCards|ArkhamImportBondedCards[]> Code to Subname
---@field public card_bag_guid string
---@field public weaknesses_bag_guid string
---@field public investigaotor_bag_guid string
---@field public minicard_bag_guid
---@field public ui_builder_guid string
---@field public command_manager_guid string
---@field public zones table<string, ArkhamImportZone>
---@field public debug_deck_id string|nil
ArkhamImportConfiguration = {}

---@class ArkhamImportUIParameters
---@field public target_guid string
---@field public debug_deck_id string|nil
---@field public checkbox_toggle_callback_name string
---@field public build_deck_callback_name
ArkhamImportUIArguments = {}

---@class ArkhamImportBondedCards
---@field public code string
---@field public count number
ArkhamImportBondedCards = {}

---@class ArkhamImportDeck
---@field public name string
---@field public description_md string
---@field public slots table<string, number>
---@field public taboo_id string
---@field public investigator_code string
---@field public meta string|nil
ArkhamImportDeck = {}

---@class ArkhamImportCard
---@field public code string
---@field public real_name string
---@field public xp number
---@field public type_code string
---@field public subname string
---@field public subtype_name string
---@field public faction_name string
---@field public pack_name string
---@field public permanent boolean
---@field public is_bonded boolean
---@field public count number
ArkhamImportCard = {}

---@class ArkhamImport_CommandManager_InitializationArguments
---@field public configuration ArkhamImportConfiguration
---@field public description string
ArkhamImport_CommandManager_InitializationArguments = {}

---@class ArkhamImport_CommandManager_InitializationResults
---@field public configuration ArkhamImportConfiguration
---@field public is_successful boolean
---@field public error_message string|nil
ArkhamImport_CommandManager_InitializationResults = {}

---@class ArkhamImport_Command_DescriptionInstructionArguments
---@field public configuration ArkhamImportConfiguration
---@field public command_state table<string, any>
---@field public arguments string[]
ArkhamImport_Command_DescriptionInstructionArguments = {}

---@class ArkhamImport_Command_DescriptionInstructionResults
---@field public configuration ArkhamImportConfiguration
---@field public command_state table<string, any>
---@field public is_successful boolean
---@field public error_message string|nil
ArkhamImport_Command_DescriptionInstructionResults = {}

---@class ArkhamImport_CommandManager_HandlerArguments
---@field public configuration ArkhamImportConfiguration
---@field public source_guid string
---@field public zone string[]
---@field public card ArkhamImportCard
ArkhamImport_CommandManager_HandlerArguments = {}

---@class ArkhamImport_Command_HandlerArguments
---@field public configuration ArkhamImportConfiguration
---@field public source_guid string
---@field public zone string[]
---@field public command_state table<string, any>
---@field public card ArkhamImportCard
ArkhamImport_Command_HandlerArguments = {}

---@class ArkhamImport_CommandManager_HandlerResults
---@field public handled boolean
---@field public card ArkhamImportCard
---@field public zone string[]
---@field public is_successful boolean
---@field public error_message string|nil
ArkhamImport_CommandManager_HandlerResults = {}

---@class ArkhamImport_Command_HandlerResults
---@field public handled boolean
---@field public card ArkhamImportCard
---@field public zone string[]
---@field public command_state table<string, any>
---@field public is_successful boolean
---@field public error_message string|nil
ArkhamImport_Command_HandlerResults = {}

---@class ArkhamImport_Command_RunDirectives
---@field public instructions boolean
---@field public handlers boolean
ArkhamImport_Command_RunDirectives = {}

---@class ArkhamImportTaboo
---@field public date string
---@field public cards table<string, boolean>
ArkhamImportTaboo = {}

---@class ArkhamImportZone
---@field public position Vector
---@field public is_facedown boolean
---@field public is_absolute boolean
ArkhamImportZone = {}

---@class ArkhamImportCommandParserResult
---@field public command string
---@field public arguments string[]
ArkhamImportCommandParserResult = {}

---@class Request
---@field uri string
---@field is_done boolean
---@field is_successful boolean
---@field content any
---@field error_message string|nil
local Request = {}

--- Creates a new instance of a Request. Should not be directly called. Instead use Request.start and Request.deferred.
---@param uri string
---@param configure fun(request: Request, status: WebRequestStatus)
---@return Request
function Request:new(uri, configure) end

--- Creates a new request. on_success should set the request's is_done, is_successful, and content variables.
--- Deferred should be used when you don't want to set is_done immediately (such as if you want to wait for another request to finish)
---@param uri string
---@param on_success fun(request: Request, status: WebRequestStatus, vararg any)
---@param on_error fun(status: WebRequestStatus)|nil
---@vararg any[]
---@return Request
function Request.deferred(uri, on_success, on_error, ...) end

--- Creates a new request. on_success should return weather the resultant data is as expected, and the processed content of the request.
---@param uri string
---@param on_success fun(status: WebRequestStatus, vararg any): boolean, any
---@param on_error nil|fun(status: WebRequestStatus, vararg any): string
---@vararg any[]
---@return Request
function Request.start(uri, on_success, on_error, ...) end

---@param callback fun(request: Request, content: any, vararg any)
function Request:with(callback, ...) end

---@param requests Request[]
---@param on_success fun(content: any[], vararg any[])
---@param on_error fun(requests: Request[], vararg any[])|nil
---@vararg any
function Request.with_all(requests, on_success, on_error, ...) end
